# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to Maven

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 4: Build the project with Maven
    - name: Build with Maven
      run: mvn clean install

    # Step 5: Deploy to Maven repository
    - name: Deploy to Maven Repository
      # env:
      #   MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }} # Add this secret in your repository settings
      #   MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }} # Add this secret in your repository settings
      run: mvn deploy -DskipTests=true

    # Optional: Post-deployment notification
    - name: Notify Success
      if: success()
      run: echo "Build and deployment to Maven repository completed successfully."
